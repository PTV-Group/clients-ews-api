/*
 * EWS Road Distance
 *
 * With the EWS Road Distance service you can query pre-calculated distances and additional information for relations between reference locations in Europe.
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.ews.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.ews.Model
{
    /// <summary>
    /// RequestLocation
    /// </summary>
    [DataContract(Name = "RequestLocation")]
    public partial class RequestLocation : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public LocationType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestLocation" /> class.
        /// </summary>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)..</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country..</param>
        /// <param name="locality">The name of a locality in the language spoken in that country or region, always transliterated to Latin. It can be the name of a city (e.g. &#39;Karlsruhe&#39;), a subdistrict (e.g. &#39;Durlach&#39;) or a combination of both separated with a blank (e.g. &#39;Karlsruhe Durlach&#39;)..</param>
        /// <param name="type">type.</param>
        public RequestLocation(string country = default(string), string postalCode = default(string), string locality = default(string), LocationType? type = default(LocationType?))
        {
            this.Country = country;
            this.PostalCode = postalCode;
            this.Locality = locality;
            this.Type = type;
        }

        /// <summary>
        /// The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
        /// </summary>
        /// <value>The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).</value>
        /// <example>DE</example>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// The postal code, or zip-code, which is used by a postal authority of a country.
        /// </summary>
        /// <value>The postal code, or zip-code, which is used by a postal authority of a country.</value>
        /// <example>76131</example>
        [DataMember(Name = "postalCode", EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The name of a locality in the language spoken in that country or region, always transliterated to Latin. It can be the name of a city (e.g. &#39;Karlsruhe&#39;), a subdistrict (e.g. &#39;Durlach&#39;) or a combination of both separated with a blank (e.g. &#39;Karlsruhe Durlach&#39;).
        /// </summary>
        /// <value>The name of a locality in the language spoken in that country or region, always transliterated to Latin. It can be the name of a city (e.g. &#39;Karlsruhe&#39;), a subdistrict (e.g. &#39;Durlach&#39;) or a combination of both separated with a blank (e.g. &#39;Karlsruhe Durlach&#39;).</value>
        /// <example>Karlsruhe</example>
        [DataMember(Name = "locality", EmitDefaultValue = true)]
        public string Locality { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestLocation {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
