/*
 * EWS Road Distance
 *
 * With the EWS Road Distance service you can query pre-calculated distances and additional information for relations between reference locations in Europe.
 *
 * The version of the OpenAPI document: 1.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.ews.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.ews.Model
{
    /// <summary>
    /// RoadDistanceResponse
    /// </summary>
    [DataContract(Name = "RoadDistanceResponse")]
    public partial class RoadDistanceResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoadDistanceResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RoadDistanceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoadDistanceResponse" /> class.
        /// </summary>
        /// <param name="distance">The distance of the relation [m]. (required).</param>
        /// <param name="tollDistance">The distance of toll roads of the relation [m], if requested..</param>
        /// <param name="start">start (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="dataVersion">The version of the data by year. (required).</param>
        /// <param name="region">The region which was searched for the reference locations. (required).</param>
        public RoadDistanceResponse(int distance = default(int), int tollDistance = default(int), ResponseLocation start = default(ResponseLocation), ResponseLocation destination = default(ResponseLocation), string dataVersion = default(string), string region = default(string))
        {
            this.Distance = distance;
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new ArgumentNullException("start is a required property for RoadDistanceResponse and cannot be null");
            }
            this.Start = start;
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for RoadDistanceResponse and cannot be null");
            }
            this.Destination = destination;
            // to ensure "dataVersion" is required (not null)
            if (dataVersion == null)
            {
                throw new ArgumentNullException("dataVersion is a required property for RoadDistanceResponse and cannot be null");
            }
            this.DataVersion = dataVersion;
            // to ensure "region" is required (not null)
            if (region == null)
            {
                throw new ArgumentNullException("region is a required property for RoadDistanceResponse and cannot be null");
            }
            this.Region = region;
            this.TollDistance = tollDistance;
        }

        /// <summary>
        /// The distance of the relation [m].
        /// </summary>
        /// <value>The distance of the relation [m].</value>
        /// <example>1422</example>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public int Distance { get; set; }

        /// <summary>
        /// The distance of toll roads of the relation [m], if requested.
        /// </summary>
        /// <value>The distance of toll roads of the relation [m], if requested.</value>
        /// <example>985</example>
        [DataMember(Name = "tollDistance", EmitDefaultValue = false)]
        public int TollDistance { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", IsRequired = true, EmitDefaultValue = true)]
        public ResponseLocation Start { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public ResponseLocation Destination { get; set; }

        /// <summary>
        /// The version of the data by year.
        /// </summary>
        /// <value>The version of the data by year.</value>
        [DataMember(Name = "dataVersion", IsRequired = true, EmitDefaultValue = true)]
        public string DataVersion { get; set; }

        /// <summary>
        /// The region which was searched for the reference locations.
        /// </summary>
        /// <value>The region which was searched for the reference locations.</value>
        [DataMember(Name = "region", IsRequired = true, EmitDefaultValue = true)]
        public string Region { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoadDistanceResponse {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  TollDistance: ").Append(TollDistance).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  DataVersion: ").Append(DataVersion).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Distance (int) minimum
            if (this.Distance < (int)0)
            {
                yield return new ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }

            // TollDistance (int) minimum
            if (this.TollDistance < (int)0)
            {
                yield return new ValidationResult("Invalid value for TollDistance, must be a value greater than or equal to 0.", new [] { "TollDistance" });
            }

            yield break;
        }
    }

}
