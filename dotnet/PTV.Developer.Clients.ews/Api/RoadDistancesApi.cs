/*
 * EWS Road Distance
 *
 * With the EWS Road Distance service you can query pre-calculated distances and additional information for relations between reference locations in Europe.
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.ews.Client;
using PTV.Developer.Clients.ews.Model;

namespace PTV.Developer.Clients.ews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoadDistancesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the truck distance and additional information for a relation between two locations.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start of the relation. (optional)</param>
        /// <param name="destination">The destination of the relation. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="results">Comma-separated list that defines which results besides the distance will be returned. * &#x60;COORDINATES&#x60;     Response includes latitude and longitude of the reference locations of start and destination. * &#x60;TOLL_DISTANCE&#x60;     Response includes the distance of toll roads of the relation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RoadDistanceResponse</returns>
        RoadDistanceResponse GetRelation(RequestLocation? start = default(RequestLocation?), RequestLocation? destination = default(RequestLocation?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), List<ResultsType>? results = default(List<ResultsType>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the truck distance and additional information for a relation between two locations.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start of the relation. (optional)</param>
        /// <param name="destination">The destination of the relation. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="results">Comma-separated list that defines which results besides the distance will be returned. * &#x60;COORDINATES&#x60;     Response includes latitude and longitude of the reference locations of start and destination. * &#x60;TOLL_DISTANCE&#x60;     Response includes the distance of toll roads of the relation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RoadDistanceResponse</returns>
        ApiResponse<RoadDistanceResponse> GetRelationWithHttpInfo(RequestLocation? start = default(RequestLocation?), RequestLocation? destination = default(RequestLocation?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), List<ResultsType>? results = default(List<ResultsType>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)</param>
        /// <param name="postalCode">The postal code or its initial characters. (optional)</param>
        /// <param name="locality">The name or initial characters of the city or district in the language spoken in that country or region, always transliterated to Latin. The input will first be matched to city names and then to subdistrict names. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuggestionsResponse</returns>
        SuggestionsResponse GetSuggestions(string? country = default(string?), string? postalCode = default(string?), string? locality = default(string?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), LocationType? type = default(LocationType?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)</param>
        /// <param name="postalCode">The postal code or its initial characters. (optional)</param>
        /// <param name="locality">The name or initial characters of the city or district in the language spoken in that country or region, always transliterated to Latin. The input will first be matched to city names and then to subdistrict names. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuggestionsResponse</returns>
        ApiResponse<SuggestionsResponse> GetSuggestionsWithHttpInfo(string? country = default(string?), string? postalCode = default(string?), string? locality = default(string?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), LocationType? type = default(LocationType?), int? limit = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoadDistancesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the truck distance and additional information for a relation between two locations.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start of the relation. (optional)</param>
        /// <param name="destination">The destination of the relation. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="results">Comma-separated list that defines which results besides the distance will be returned. * &#x60;COORDINATES&#x60;     Response includes latitude and longitude of the reference locations of start and destination. * &#x60;TOLL_DISTANCE&#x60;     Response includes the distance of toll roads of the relation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoadDistanceResponse</returns>
        System.Threading.Tasks.Task<RoadDistanceResponse> GetRelationAsync(RequestLocation? start = default(RequestLocation?), RequestLocation? destination = default(RequestLocation?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), List<ResultsType>? results = default(List<ResultsType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the truck distance and additional information for a relation between two locations.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start of the relation. (optional)</param>
        /// <param name="destination">The destination of the relation. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="results">Comma-separated list that defines which results besides the distance will be returned. * &#x60;COORDINATES&#x60;     Response includes latitude and longitude of the reference locations of start and destination. * &#x60;TOLL_DISTANCE&#x60;     Response includes the distance of toll roads of the relation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoadDistanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoadDistanceResponse>> GetRelationWithHttpInfoAsync(RequestLocation? start = default(RequestLocation?), RequestLocation? destination = default(RequestLocation?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), List<ResultsType>? results = default(List<ResultsType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)</param>
        /// <param name="postalCode">The postal code or its initial characters. (optional)</param>
        /// <param name="locality">The name or initial characters of the city or district in the language spoken in that country or region, always transliterated to Latin. The input will first be matched to city names and then to subdistrict names. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuggestionsResponse</returns>
        System.Threading.Tasks.Task<SuggestionsResponse> GetSuggestionsAsync(string? country = default(string?), string? postalCode = default(string?), string? locality = default(string?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), LocationType? type = default(LocationType?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)</param>
        /// <param name="postalCode">The postal code or its initial characters. (optional)</param>
        /// <param name="locality">The name or initial characters of the city or district in the language spoken in that country or region, always transliterated to Latin. The input will first be matched to city names and then to subdistrict names. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuggestionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionsResponse>> GetSuggestionsWithHttpInfoAsync(string? country = default(string?), string? postalCode = default(string?), string? locality = default(string?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), LocationType? type = default(LocationType?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoadDistancesApi : IRoadDistancesApiSync, IRoadDistancesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoadDistancesApi : IRoadDistancesApi
    {
        private PTV.Developer.Clients.ews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoadDistancesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoadDistancesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoadDistancesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoadDistancesApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.ews.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.ews.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.ews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.ews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.ews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.ews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoadDistancesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoadDistancesApi(PTV.Developer.Clients.ews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.ews.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.ews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.ews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.ews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.ews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoadDistancesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RoadDistancesApi(PTV.Developer.Clients.ews.Client.ISynchronousClient client, PTV.Developer.Clients.ews.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.ews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.ews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.ews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.ews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.ews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.ews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets the truck distance and additional information for a relation between two locations.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start of the relation. (optional)</param>
        /// <param name="destination">The destination of the relation. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="results">Comma-separated list that defines which results besides the distance will be returned. * &#x60;COORDINATES&#x60;     Response includes latitude and longitude of the reference locations of start and destination. * &#x60;TOLL_DISTANCE&#x60;     Response includes the distance of toll roads of the relation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RoadDistanceResponse</returns>
        public RoadDistanceResponse GetRelation(RequestLocation? start = default(RequestLocation?), RequestLocation? destination = default(RequestLocation?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), List<ResultsType>? results = default(List<ResultsType>?), int operationIndex = 0)
        {
            PTV.Developer.Clients.ews.Client.ApiResponse<RoadDistanceResponse> localVarResponse = GetRelationWithHttpInfo(start, destination, region, dataVersion, results);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the truck distance and additional information for a relation between two locations.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start of the relation. (optional)</param>
        /// <param name="destination">The destination of the relation. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="results">Comma-separated list that defines which results besides the distance will be returned. * &#x60;COORDINATES&#x60;     Response includes latitude and longitude of the reference locations of start and destination. * &#x60;TOLL_DISTANCE&#x60;     Response includes the distance of toll roads of the relation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RoadDistanceResponse</returns>
        public PTV.Developer.Clients.ews.Client.ApiResponse<RoadDistanceResponse> GetRelationWithHttpInfo(RequestLocation? start = default(RequestLocation?), RequestLocation? destination = default(RequestLocation?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), List<ResultsType>? results = default(List<ResultsType>?), int operationIndex = 0)
        {
            PTV.Developer.Clients.ews.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.ews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.ews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.ews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                if (start.Country != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "start[country]", start.Country));
                }
                if (start.PostalCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "start[postalCode]", start.PostalCode));
                }
                if (start.Locality != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "start[locality]", start.Locality));
                }
                if (start.Type != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "start[type]", start.Type));
                }
            }
            if (destination != null)
            {
                if (destination.Country != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "destination[country]", destination.Country));
                }
                if (destination.PostalCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "destination[postalCode]", destination.PostalCode));
                }
                if (destination.Locality != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "destination[locality]", destination.Locality));
                }
                if (destination.Type != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "destination[type]", destination.Type));
                }
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (dataVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "dataVersion", dataVersion));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }

            localVarRequestOptions.Operation = "RoadDistancesApi.GetRelation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoadDistanceResponse>("/relations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the truck distance and additional information for a relation between two locations.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start of the relation. (optional)</param>
        /// <param name="destination">The destination of the relation. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="results">Comma-separated list that defines which results besides the distance will be returned. * &#x60;COORDINATES&#x60;     Response includes latitude and longitude of the reference locations of start and destination. * &#x60;TOLL_DISTANCE&#x60;     Response includes the distance of toll roads of the relation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoadDistanceResponse</returns>
        public async System.Threading.Tasks.Task<RoadDistanceResponse> GetRelationAsync(RequestLocation? start = default(RequestLocation?), RequestLocation? destination = default(RequestLocation?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), List<ResultsType>? results = default(List<ResultsType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.ews.Client.ApiResponse<RoadDistanceResponse> localVarResponse = await GetRelationWithHttpInfoAsync(start, destination, region, dataVersion, results, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the truck distance and additional information for a relation between two locations.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start of the relation. (optional)</param>
        /// <param name="destination">The destination of the relation. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="results">Comma-separated list that defines which results besides the distance will be returned. * &#x60;COORDINATES&#x60;     Response includes latitude and longitude of the reference locations of start and destination. * &#x60;TOLL_DISTANCE&#x60;     Response includes the distance of toll roads of the relation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoadDistanceResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.ews.Client.ApiResponse<RoadDistanceResponse>> GetRelationWithHttpInfoAsync(RequestLocation? start = default(RequestLocation?), RequestLocation? destination = default(RequestLocation?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), List<ResultsType>? results = default(List<ResultsType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.ews.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.ews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.ews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.ews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                if (start.Country != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "start[country]", start.Country));
                }
                if (start.PostalCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "start[postalCode]", start.PostalCode));
                }
                if (start.Locality != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "start[locality]", start.Locality));
                }
                if (start.Type != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "start[type]", start.Type));
                }
            }
            if (destination != null)
            {
                if (destination.Country != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "destination[country]", destination.Country));
                }
                if (destination.PostalCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "destination[postalCode]", destination.PostalCode));
                }
                if (destination.Locality != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "destination[locality]", destination.Locality));
                }
                if (destination.Type != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "destination[type]", destination.Type));
                }
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (dataVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "dataVersion", dataVersion));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }

            localVarRequestOptions.Operation = "RoadDistancesApi.GetRelation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RoadDistanceResponse>("/relations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)</param>
        /// <param name="postalCode">The postal code or its initial characters. (optional)</param>
        /// <param name="locality">The name or initial characters of the city or district in the language spoken in that country or region, always transliterated to Latin. The input will first be matched to city names and then to subdistrict names. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuggestionsResponse</returns>
        public SuggestionsResponse GetSuggestions(string? country = default(string?), string? postalCode = default(string?), string? locality = default(string?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), LocationType? type = default(LocationType?), int? limit = default(int?), int operationIndex = 0)
        {
            PTV.Developer.Clients.ews.Client.ApiResponse<SuggestionsResponse> localVarResponse = GetSuggestionsWithHttpInfo(country, postalCode, locality, region, dataVersion, type, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)</param>
        /// <param name="postalCode">The postal code or its initial characters. (optional)</param>
        /// <param name="locality">The name or initial characters of the city or district in the language spoken in that country or region, always transliterated to Latin. The input will first be matched to city names and then to subdistrict names. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuggestionsResponse</returns>
        public PTV.Developer.Clients.ews.Client.ApiResponse<SuggestionsResponse> GetSuggestionsWithHttpInfo(string? country = default(string?), string? postalCode = default(string?), string? locality = default(string?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), LocationType? type = default(LocationType?), int? limit = default(int?), int operationIndex = 0)
        {
            PTV.Developer.Clients.ews.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.ews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.ews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.ews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (postalCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "postalCode", postalCode));
            }
            if (locality != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "locality", locality));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (dataVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "dataVersion", dataVersion));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "RoadDistancesApi.GetSuggestions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuggestionsResponse>("/suggestions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSuggestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)</param>
        /// <param name="postalCode">The postal code or its initial characters. (optional)</param>
        /// <param name="locality">The name or initial characters of the city or district in the language spoken in that country or region, always transliterated to Latin. The input will first be matched to city names and then to subdistrict names. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuggestionsResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionsResponse> GetSuggestionsAsync(string? country = default(string?), string? postalCode = default(string?), string? locality = default(string?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), LocationType? type = default(LocationType?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.ews.Client.ApiResponse<SuggestionsResponse> localVarResponse = await GetSuggestionsWithHttpInfoAsync(country, postalCode, locality, region, dataVersion, type, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.ews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)</param>
        /// <param name="postalCode">The postal code or its initial characters. (optional)</param>
        /// <param name="locality">The name or initial characters of the city or district in the language spoken in that country or region, always transliterated to Latin. The input will first be matched to city names and then to subdistrict names. (optional)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="dataVersion"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuggestionsResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.ews.Client.ApiResponse<SuggestionsResponse>> GetSuggestionsWithHttpInfoAsync(string? country = default(string?), string? postalCode = default(string?), string? locality = default(string?), RegionType? region = default(RegionType?), DataVersionType? dataVersion = default(DataVersionType?), LocationType? type = default(LocationType?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.ews.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.ews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.ews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.ews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (postalCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "postalCode", postalCode));
            }
            if (locality != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "locality", locality));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (dataVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "dataVersion", dataVersion));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.ews.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "RoadDistancesApi.GetSuggestions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuggestionsResponse>("/suggestions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSuggestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
