/* tslint:disable */
/* eslint-disable */
/**
 * EWS Road Distance
 * With the EWS Road Distance service you can query pre-calculated distances and additional information for relations between reference locations in Europe.
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataVersionType,
  ErrorResponse,
  LocationType,
  RegionType,
  RequestLocation,
  ResultsType,
  RoadDistanceResponse,
  SuggestionsResponse,
} from '../models';
import {
    DataVersionTypeFromJSON,
    DataVersionTypeToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LocationTypeFromJSON,
    LocationTypeToJSON,
    RegionTypeFromJSON,
    RegionTypeToJSON,
    RequestLocationFromJSON,
    RequestLocationToJSON,
    ResultsTypeFromJSON,
    ResultsTypeToJSON,
    RoadDistanceResponseFromJSON,
    RoadDistanceResponseToJSON,
    SuggestionsResponseFromJSON,
    SuggestionsResponseToJSON,
} from '../models';

export interface GetRelationRequest {
    start?: RequestLocation;
    destination?: RequestLocation;
    region?: RegionType;
    dataVersion?: DataVersionType;
    results?: Array<ResultsType>;
}

export interface GetSuggestionsRequest {
    country?: string;
    postalCode?: string;
    locality?: string;
    region?: RegionType;
    dataVersion?: DataVersionType;
    type?: LocationType;
    limit?: number;
}

/**
 * 
 */
export class RoadDistancesApi extends runtime.BaseAPI {

    /**
     * Gets the truck distance and additional information for a relation between two locations.
     */
    async getRelationRaw(requestParameters: GetRelationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoadDistanceResponse>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.destination !== undefined) {
            queryParameters['destination'] = requestParameters.destination;
        }

        if (requestParameters.region !== undefined) {
            queryParameters['region'] = requestParameters.region;
        }

        if (requestParameters.dataVersion !== undefined) {
            queryParameters['dataVersion'] = requestParameters.dataVersion;
        }

        if (requestParameters.results) {
            queryParameters['results'] = requestParameters.results.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};
		headerParameters['User-Agent'] = "ptv-generated typescript client";

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/relations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoadDistanceResponseFromJSON(jsonValue));
    }

    /**
     * Gets the truck distance and additional information for a relation between two locations.
     */
    async getRelation(requestParameters: GetRelationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoadDistanceResponse> {
        const response = await this.getRelationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
     */
    async getSuggestionsRaw(requestParameters: GetSuggestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.country !== undefined) {
            queryParameters['country'] = requestParameters.country;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }

        if (requestParameters.locality !== undefined) {
            queryParameters['locality'] = requestParameters.locality;
        }

        if (requestParameters.region !== undefined) {
            queryParameters['region'] = requestParameters.region;
        }

        if (requestParameters.dataVersion !== undefined) {
            queryParameters['dataVersion'] = requestParameters.dataVersion;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};
		headerParameters['User-Agent'] = "ptv-generated typescript client";

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/suggestions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuggestionsResponseFromJSON(jsonValue));
    }

    /**
     * Gets suggestions for a location. Provide at least two characters in **postalCode** or **locality** to obtain results.
     */
    async getSuggestions(requestParameters: GetSuggestionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionsResponse> {
        const response = await this.getSuggestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
