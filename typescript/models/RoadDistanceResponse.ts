/* tslint:disable */
/* eslint-disable */
/**
 * EWS Road Distance
 * With the EWS Road Distance service you can query pre-calculated distances and additional information for relations between reference locations in Europe.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ResponseLocation } from './ResponseLocation';
import {
    ResponseLocationFromJSON,
    ResponseLocationFromJSONTyped,
    ResponseLocationToJSON,
} from './ResponseLocation';

/**
 * 
 * @export
 * @interface RoadDistanceResponse
 */
export interface RoadDistanceResponse {
    /**
     * The distance of the relation [m].
     * @type {number}
     * @memberof RoadDistanceResponse
     */
    distance: number;
    /**
     * The distance of toll roads of the relation [m], if requested.
     * @type {number}
     * @memberof RoadDistanceResponse
     */
    tollDistance?: number;
    /**
     * 
     * @type {ResponseLocation}
     * @memberof RoadDistanceResponse
     */
    start: ResponseLocation;
    /**
     * 
     * @type {ResponseLocation}
     * @memberof RoadDistanceResponse
     */
    destination: ResponseLocation;
    /**
     * The version of the data by year.
     * @type {string}
     * @memberof RoadDistanceResponse
     */
    dataVersion: string;
    /**
     * The region which was searched for the reference locations.
     * @type {string}
     * @memberof RoadDistanceResponse
     */
    region: string;
}

/**
 * Check if a given object implements the RoadDistanceResponse interface.
 */
export function instanceOfRoadDistanceResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "distance" in value;
    isInstance = isInstance && "start" in value;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "dataVersion" in value;
    isInstance = isInstance && "region" in value;

    return isInstance;
}

export function RoadDistanceResponseFromJSON(json: any): RoadDistanceResponse {
    return RoadDistanceResponseFromJSONTyped(json, false);
}

export function RoadDistanceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoadDistanceResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'distance': json['distance'],
        'tollDistance': !exists(json, 'tollDistance') ? undefined : json['tollDistance'],
        'start': ResponseLocationFromJSON(json['start']),
        'destination': ResponseLocationFromJSON(json['destination']),
        'dataVersion': json['dataVersion'],
        'region': json['region'],
    };
}

export function RoadDistanceResponseToJSON(value?: RoadDistanceResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'distance': value.distance,
        'tollDistance': value.tollDistance,
        'start': ResponseLocationToJSON(value.start),
        'destination': ResponseLocationToJSON(value.destination),
        'dataVersion': value.dataVersion,
        'region': value.region,
    };
}

