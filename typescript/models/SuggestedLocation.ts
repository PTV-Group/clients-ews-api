/* tslint:disable */
/* eslint-disable */
/**
 * EWS Road Distance
 * With the EWS Road Distance service you can query pre-calculated distances and additional information for relations between reference locations in Europe.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocationType } from './LocationType';
import {
    LocationTypeFromJSON,
    LocationTypeFromJSONTyped,
    LocationTypeToJSON,
} from './LocationType';

/**
 * A location suggested for the input.
 * @export
 * @interface SuggestedLocation
 */
export interface SuggestedLocation {
    /**
     * The country represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
     * @type {string}
     * @memberof SuggestedLocation
     */
    country: string;
    /**
     * The postal code, or zip-code, which is used by a postal authority of a country.
     * @type {string}
     * @memberof SuggestedLocation
     */
    postalCode?: string;
    /**
     * The name of the city or district in the language spoken in that country or region, always transliterated to Latin.
     * @type {string}
     * @memberof SuggestedLocation
     */
    locality: string;
    /**
     * 
     * @type {LocationType}
     * @memberof SuggestedLocation
     */
    type: LocationType;
}



/**
 * Check if a given object implements the SuggestedLocation interface.
 */
export function instanceOfSuggestedLocation(value: object): value is SuggestedLocation {
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('locality' in value) || value['locality'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function SuggestedLocationFromJSON(json: any): SuggestedLocation {
    return SuggestedLocationFromJSONTyped(json, false);
}

export function SuggestedLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuggestedLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'country': json['country'],
        'postalCode': json['postalCode'] == null ? undefined : json['postalCode'],
        'locality': json['locality'],
        'type': LocationTypeFromJSON(json['type']),
    };
}

export function SuggestedLocationToJSON(value?: SuggestedLocation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'country': value['country'],
        'postalCode': value['postalCode'],
        'locality': value['locality'],
        'type': LocationTypeToJSON(value['type']),
    };
}

